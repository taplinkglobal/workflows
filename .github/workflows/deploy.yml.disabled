name: Deploy
on:
  workflow_call:
    inputs:
      service:
        required: true
        type: string
jobs:
  set-version:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set version
      id: set-version
      run: |
        if [[ $GITHUB_REF_TYPE == branch && $GITHUB_REF_NAME == add-kubernetes-config ]]; then
          echo VERSION=dev.$GITHUB_SHA >> $GITHUB_OUTPUT
          echo ENVIRONMENT=dev >> $GITHUB_OUTPUT

        elif [[ $GITHUB_REF_TYPE == tag && $GITHUB_REF_NAME =~ [0-9]+\.[0-9]+\.[0-9]-staging ]]; then
          git branch --contains $GITHUB_SHA | grep staging
          if [ $? -ne 0 ]; then
            echo "Tag contains \"staging\" must be set only for commit in staging branch!"
            exit 1
          fi
          echo VERSION=$GITHUB_REF_NAME  >> $GITHUB_OUTPUT
          echo ENVIRONMENT=staging >> $GITHUB_OUTPUT

        elif [[ $GITHUB_REF_TYPE == tag && $GITHUB_REF_NAME =~ ^[0-9]+\.[0-9]+\.[0-9]$ ]]; then
          git branch --contains $GITHUB_SHA | grep main
          if [ $? -ne 0 ]; then
            echo "Release tag must be set only for commit in main branch!"
            exit 1
          fi
          echo VERSION=$GITHUB_REF_NAME >> $GITHUB_OUTPUT
          echo ENVIRONMENT=production >> $GITHUB_OUTPUT

        else
          echo "Tag or branch doesn't match version rules!"
          exit 1
        fi
  deploy-helm:
    name: Deploy helm
    runs-on: ubuntu-latest
    needs: set-version
    container:
      image: alpine/helm:3.10.1
      env:
        KUBECONFIG_BASE64: ${{ secrets.KUBECONFIG }}
        VERSION: ${{ needs.set-version.set-version.outputs.VERSION }}
        ENVIRONMENT: ${{ needs.set-version.steps.set-version.outputs.ENVIRONMENT }}
        SERVICE: ${{ inputs.service }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Create kubeconfig
      run: |
        echo $KUBECONFIG_BASE64 | base64 -d > temp-kubeconfig &&
        chmod 600 temp-kubeconfig
    - name: Create helm package
      run: helm package helm/$SERVICE --app-version $VERSION --version $VERSION
    - name: Deploy helm
      run: >
        helm upgrade $ENVIRONMENT-$SERVICE $SERVICE-$VERSION.tgz
        --install --atomic
        --values helm/$ENVIRONMENT-values.yaml
        --namespace onelink-$ENVIRONMENT
        --kubeconfig temp-kubeconfig
